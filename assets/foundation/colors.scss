/*============================================================================
  Colors
==============================================================================*/

/*================ Palette ================*/
$color-palette-data: (
  white: (
    base: #ffffff,
  ),

  black: (
    base: #000000,
  ),

  blue: (
    light: #2d948d,
    base: #69c8c3,
  ),

  brown: (
    base: #62381b,
  ),

  beige: (
    base: #f2efd9,
  ),

  green: (
    base: #a0bf3b,
  ),

  yellow: (
    base: #e8d320,
  ),

  orange: (
    base: #f15c27,
  ),

  pink: (
    light: #ee7d8f,
    base: #e2324b,
  ),
);

/*============================================================================
  Returns the color value for a given color name and group.

  @param {String} $hue - The color's hue.
  @param {String} $value - The darkness/lightness of the color. Defaults to base.
  @param {Color} $for-background - The background color on which this color will
    appear. Applies a multiply filter to ensure appropriate contrast.
  @return {Color} The color value.
==============================================================================*/
@function color($hue, $value: base) {
  $fetched-color: map-get(map-get($color-palette-data, $hue), $value);

  @if map-has-key($color-palette-data, $fetched-color) {
    $fetched-color: map-get(map-get($color-palette-data, $fetched-color), $value);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    @error "Color `#{$hue} - #{$value}` not found. Available colors: #{available-names($color-palette-data)}";
  }
}
